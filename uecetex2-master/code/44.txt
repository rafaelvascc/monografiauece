package br.uece.webCrud.repository;
import java.lang.reflect.ParameterizedType;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import org.springframework.stereotype.Repository;
import br.uece.webCrud.model.BaseEntity;

@Repository
public abstract class GenericRepositoryImpl<T extends BaseEntity> implements GenericRepository<T> {

	@PersistenceContext
	protected EntityManager em;

	protected Class<T> t;

	public GenericRepositoryImpl() {
		this.t = ((Class) ((ParameterizedType) getClass()
				.getGenericSuperclass()).getActualTypeArguments()[0]);
	}

	@Override
	public List<T> getAll() {
		String typeString = t.getSimpleName();
		Query q = em.createQuery("SELECT e FROM " + typeString + " e");
		return q.getResultList();
	}

	@Override
	public T getById(int id) {
		return em.find(t, id);
	}

	@Override
	public T add(T entity) {
		em.persist(entity);
		return entity;
	}

	@Override
	public T update(T entity) {
		em.merge(entity);
		return entity;
	}

	@Override
	public void delete(int id) {
		em.remove(getById(id));
	}
}
